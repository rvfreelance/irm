{"version":3,"sources":["container/App.js","serviceWorker.js","index.js"],"names":["keywords","Keyword","props","nextKeyword","i","state","keywordArray","length","setState","keyword","toUpperCase","render","updateHeading","visibilityOff","visibilityOn","switchInterval","interval","checkKeyword","setInterval","console","log","setTimeout","this","id","className","style","color","fontSize","Component","App","changeStateForVisibilty","visibilityStart","visibilityEnd","displayComingSoon","fontWeight","backgroundColor","textAlign","position","bottom","left","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kOAGMA,G,MAAW,CAAC,cAAe,UAAW,YAAa,UAAW,YAAa,yBAE3EC,E,YACF,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KAUVC,YAAa,WACT,IAAIC,EAAG,EAAKC,MAAMC,aAAaC,OAC5B,EAAKF,MAAMC,aAAaC,SAAWP,EAASO,QAE3C,EAAKC,SAAS,CACVC,QAAST,EAASI,GAAGM,cACrBJ,aAAa,GAAD,mBAAM,EAAKD,MAAMC,cAAjB,CAA+BN,EAASI,OAI5D,EAAKO,UArBS,EAwBlBC,cAAe,WACX,EAAKJ,SAAS,CACVK,cAAgB,UAChBC,aAAe,YA3BL,EAwClBC,eAAgB,WACZ,IAAIC,EAAW,IAEf,OAAO,EAAKX,MAAMC,aAAaC,QAC3B,KAAK,EAEL,QAAUS,EAAW,IAIzB,OAAOA,GAlDO,EAqDlBC,aAAc,WAOV,GAAsC,IAAnC,EAAKZ,MAAMC,aAAaC,OAEvBW,YAAY,EAAKf,YAAa,EAAKY,kBACnCI,QAAQC,IAAwB,KAAnBpB,EAASO,OAAO,IAC7Bc,WAAW,EAAKT,cAAoC,KAAnBZ,EAASO,OAAO,QAI/C,IAAG,EAAKF,MAAMC,aAAaC,SAAWP,EAASO,OAMjD,OAAO,EAJPW,YAAY,EAAKf,YAAa,OApElC,EAAKE,MAAQ,CACTI,QAAS,WACTH,aAAe,GACfO,cAAgB,SAChBC,aAAe,WANL,E,iFAgCdQ,KAAKL,iB,+BAiDL,OASI,yBAAKM,GAAG,SACJ,uBAAGC,UAAWF,KAAKjB,MAAMS,cAAzB,eAAmD,8BAAQQ,KAAKL,aAAeK,KAAKjB,MAAMI,QAAU,SACpG,uBAAGe,UAAWF,KAAKjB,MAAMQ,eAAzB,aAAkD,uCAClD,uBAAGW,UAAS,UAAKF,KAAKjB,MAAMQ,cAAhB,gBAAZ,KACM,0BAAMY,MAAO,CAACC,MAAM,YAAaC,SAAS,WAA1C,SADN,IAEK,0BAAMF,MAAO,CAACC,MAAM,YAAaC,SAAS,WAA1C,YAFL,IAGK,0BAAMF,MAAO,CAACC,MAAM,YAAaC,SAAS,WAA1C,UAHL,U,GA9FMC,aA4JPC,E,YAjDX,aAAc,IAAD,8BACT,+CAOJC,wBAAyB,WACrB,EAAKtB,SAAS,CACVuB,gBAAiB,SACjBC,cAAe,aAXV,EAebC,kBAAmB,WACfZ,WAAW,EAAKS,wBAAyB,OAdzC,EAAKzB,MAAQ,CACT0B,gBAAiB,UACjBC,cAAe,UAJV,E,iFAoBTV,KAAKW,sB,+BAIL,OAKI,6BACI,yBAAKT,UAAWF,KAAKjB,MAAM0B,iBACvB,kBAAC,EAAD,OAEJ,yBAAKP,UAAWF,KAAKjB,MAAM2B,eACvB,uBAAGP,MAAO,CAACC,MAAO,OAAQQ,WAAY,OAAQC,gBAAgB,QAASR,SAAU,MAAMS,UAAW,WAAlG,eACA,uBAAGX,MAAO,CAACY,SAAU,QAASC,OAAQ,OAAQC,KAAK,SAC/C,0BAAMd,MAAO,CAACC,MAAO,mBAAoBQ,WAAY,OAAQP,SAAU,UAAvE,QAGA,0BAAMF,MAAO,CAACC,MAAO,YAAaQ,WAAY,OAAQP,SAAU,UAAhE,e,GAxCNC,aCnGEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASlC,OAAO,kBAAC,EAAD,MAASmC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.99cc1f14.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css'\r\n\r\nconst keywords = ['Mathematics', 'Physics', 'Chemistry', 'Biology', 'Computers', 'Science & Technology']\r\n\r\nclass Keyword extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            keyword: 'RESEARCH',\r\n            keywordArray : [],\r\n            visibilityOff : 'hidden',\r\n            visibilityOn : 'visible',\r\n        }\r\n    }\r\n\r\n\r\n    nextKeyword =() =>{\r\n        let i= this.state.keywordArray.length;\r\n        if(this.state.keywordArray.length === keywords.length){\r\n        }else{\r\n            this.setState({\r\n                keyword: keywords[i].toUpperCase(),\r\n                keywordArray: [...this.state.keywordArray, keywords[i]]\r\n            })\r\n        }\r\n        // console.log('keyword')\r\n        this.render()\r\n    }\r\n\r\n    updateHeading =() =>{\r\n        this.setState({\r\n            visibilityOff : 'visible',\r\n            visibilityOn : 'hidden',\r\n        })\r\n    }\r\n    componentDidMount(){\r\n        // console.log('Will check condition now')\r\n        this.checkKeyword()\r\n        // if(this.state.keywordArray.length !== keywords.length){\r\n            // setInterval(this.checkKeyword, 1000);\r\n        //     // console.log('true');\r\n        //     // return false;\r\n        // }\r\n    }\r\n\r\n    switchInterval =() =>{\r\n        let interval = 1000\r\n\r\n        switch(this.state.keywordArray.length){\r\n            case 0 : interval = 1000;\r\n                        break;\r\n            default : interval = 1000;\r\n                        break;\r\n        }\r\n        // console.log(interval)\r\n        return interval;\r\n        \r\n    }\r\n    checkKeyword =() =>{\r\n        // if(this.state.keywordArray.length !== keywords.length){\r\n        //     setInterval(this.nextKeyword, 1000);\r\n        // let arrayLength = this.state.keywordArray.length\r\n        // let constArray = keywords.length\r\n\r\n        // console.log(arrayLength +' - '+ constArray)\r\n        if(this.state.keywordArray.length === 0){\r\n            // setTimeout(this.nextKeyword, 0);\r\n            setInterval(this.nextKeyword, this.switchInterval());\r\n            console.log((keywords.length+2)*1000)\r\n            setTimeout(this.updateHeading, ((keywords.length+2)*1000))\r\n            // setTimeout(this.updateHeading, ((keywords.length+4)*1000))\r\n            // return true\r\n\r\n        }else if(this.state.keywordArray.length !== keywords.length){\r\n            // setTimeout(this.nextKeyword, 1000);\r\n            setInterval(this.nextKeyword, 1000);\r\n            // console.log('true');\r\n            // return true;\r\n        }else{\r\n            return false\r\n        }\r\n    }\r\n    \r\n    render(){\r\n\r\n        // console.log('rendered')\r\n        return(\r\n            // <div>\r\n            //     {console.log('Rendered div')}\r\n            //     {/* <p>Crazy about {this.state.keyword}</p> */}\r\n            //     {/* <p>Crazy about {(this.checkKeyword)? this.state.keyword : 'IRM.'}</p> */}\r\n            //     {(this.checkKeyword)? this.state.keyword : 'IRM.'}\r\n            // </div>\r\n            // (this.checkKeyword)? this.state.keyword : 'IRM.'\r\n\r\n            <div id='crazy'>\r\n                <p className={this.state.visibilityOn}>Crazy about <span>{(this.checkKeyword)? this.state.keyword : 'IRM.'}</span></p>   \r\n                <p className={this.state.visibilityOff}>WORK with <span>IRM.</span></p>\r\n                <p className={`${this.state.visibilityOff} smallGreen`}>\r\n                    I <span style={{color:'lightgray', fontSize:'0.75em'}}>am a </span> \r\n                    R<span style={{color:'lightgray', fontSize:'0.75em'}}>esearch </span> \r\n                    M<span style={{color:'lightgray', fontSize:'0.75em'}}>aniac </span>\r\n                    .\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nclass App extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            visibilityStart: 'visible',\r\n            visibilityEnd: 'hidden',\r\n        }\r\n    }\r\n\r\n    changeStateForVisibilty =() =>{\r\n        this.setState({\r\n            visibilityStart: 'hidden',\r\n            visibilityEnd: 'visible',\r\n        })\r\n    }\r\n\r\n    displayComingSoon =() =>{\r\n        setTimeout(this.changeStateForVisibilty, 12000)\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.displayComingSoon()\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            // <div id='crazy'>\r\n            //     <p class={this.state.visibilityOn}>Crazy about <span><Keyword /></span></p>   \r\n            //     <p class={this.state.visibilityOff}>work with <span>IRM.</span></p>\r\n            // </div>\r\n            <div>\r\n                <div className={this.state.visibilityStart}>\r\n                    <Keyword />\r\n                </div>\r\n                <div className={this.state.visibilityEnd}>\r\n                    <p style={{color: 'gray', fontWeight: 'bold', backgroundColor:'black', fontSize: '4em',textAlign: 'center'}}>COMING SOON</p>\r\n                    <p style={{position: 'fixed', bottom: '50vh', left:'40vw'}}>\r\n                        <span style={{color: 'rgb(19, 110, 75)', fontWeight: 'bold', fontSize: '4.8em'}}>\r\n                            IRM.\r\n                        </span>\r\n                        <span style={{color: 'lightgray', fontWeight: 'bold', fontSize: '3.2em'}}>\r\n                        WORK\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}